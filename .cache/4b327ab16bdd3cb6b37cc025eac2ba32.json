{"dependencies":[{"name":"/Users/willemolding/repos/panoptipong/node_modules/tape/package.json","includedInParent":true,"mtime":1529950349322},{"name":"/Users/willemolding/repos/panoptipong/package.json","includedInParent":true,"mtime":1529952454752},{"name":"/Users/willemolding/repos/panoptipong/.babelrc","includedInParent":true,"mtime":1529950097751},{"name":"defined","loc":{"line":1,"column":22},"parent":"/Users/willemolding/repos/panoptipong/node_modules/tape/index.js","resolved":"/Users/willemolding/repos/panoptipong/node_modules/defined/index.js"},{"name":"./lib/default_stream","loc":{"line":2,"column":34},"parent":"/Users/willemolding/repos/panoptipong/node_modules/tape/index.js","resolved":"/Users/willemolding/repos/panoptipong/node_modules/tape/lib/default_stream.js"},{"name":"./lib/test","loc":{"line":3,"column":19},"parent":"/Users/willemolding/repos/panoptipong/node_modules/tape/index.js","resolved":"/Users/willemolding/repos/panoptipong/node_modules/tape/lib/test.js"},{"name":"./lib/results","loc":{"line":4,"column":27},"parent":"/Users/willemolding/repos/panoptipong/node_modules/tape/index.js","resolved":"/Users/willemolding/repos/panoptipong/node_modules/tape/lib/results.js"},{"name":"through","loc":{"line":5,"column":22},"parent":"/Users/willemolding/repos/panoptipong/node_modules/tape/index.js","resolved":"/Users/willemolding/repos/panoptipong/node_modules/through/index.js"},{"name":"process","parent":"/Users/willemolding/repos/panoptipong/node_modules/tape/index.js","resolved":"/Users/willemolding/repos/panoptipong/node_modules/process/browser.js"}],"generated":{"js":"var process = require(\"process\");\nvar defined = require('defined');\nvar createDefaultStream = require('./lib/default_stream');\nvar Test = require('./lib/test');\nvar createResult = require('./lib/results');\nvar through = require('through');\n\nvar canEmitExit = typeof process !== 'undefined' && process\n    && typeof process.on === 'function' && process.browser !== true\n;\nvar canExit = typeof process !== 'undefined' && process\n    && typeof process.exit === 'function'\n;\n\nvar nextTick = typeof setImmediate !== 'undefined'\n    ? setImmediate\n    : process.nextTick\n;\n\nexports = module.exports = (function () {\n    var harness;\n    var lazyLoad = function () {\n        return getHarness().apply(this, arguments);\n    };\n\n    lazyLoad.only = function () {\n        return getHarness().only.apply(this, arguments);\n    };\n\n    lazyLoad.createStream = function (opts) {\n        if (!opts) opts = {};\n        if (!harness) {\n            var output = through();\n            getHarness({ stream: output, objectMode: opts.objectMode });\n            return output;\n        }\n        return harness.createStream(opts);\n    };\n\n    lazyLoad.onFinish = function () {\n        return getHarness().onFinish.apply(this, arguments);\n    };\n\n    lazyLoad.onFailure = function() {\n        return getHarness().onFailure.apply(this, arguments);\n    };\n\n    lazyLoad.getHarness = getHarness\n\n    return lazyLoad\n\n    function getHarness (opts) {\n        if (!opts) opts = {};\n        opts.autoclose = !canEmitExit;\n        if (!harness) harness = createExitHarness(opts);\n        return harness;\n    }\n})();\n\nfunction createExitHarness (conf) {\n    if (!conf) conf = {};\n    var harness = createHarness({\n        autoclose: defined(conf.autoclose, false)\n    });\n\n    var stream = harness.createStream({ objectMode: conf.objectMode });\n    var es = stream.pipe(conf.stream || createDefaultStream());\n    if (canEmitExit) {\n        es.on('error', function (err) { harness._exitCode = 1 });\n    }\n\n    var ended = false;\n    stream.on('end', function () { ended = true });\n\n    if (conf.exit === false) return harness;\n    if (!canEmitExit || !canExit) return harness;\n\n    var inErrorState = false;\n\n    process.on('exit', function (code) {\n        // let the process exit cleanly.\n        if (code !== 0) {\n            return\n        }\n\n        if (!ended) {\n            var only = harness._results._only;\n            for (var i = 0; i < harness._tests.length; i++) {\n                var t = harness._tests[i];\n                if (only && t !== only) continue;\n                t._exit();\n            }\n        }\n        harness.close();\n        process.exit(code || harness._exitCode);\n    });\n\n    return harness;\n}\n\nexports.createHarness = createHarness;\nexports.Test = Test;\nexports.test = exports; // tap compat\nexports.test.skip = Test.skip;\n\nvar exitInterval;\n\nfunction createHarness (conf_) {\n    if (!conf_) conf_ = {};\n    var results = createResult();\n    if (conf_.autoclose !== false) {\n        results.once('done', function () { results.close() });\n    }\n\n    var test = function (name, conf, cb) {\n        var t = new Test(name, conf, cb);\n        test._tests.push(t);\n\n        (function inspectCode (st) {\n            st.on('test', function sub (st_) {\n                inspectCode(st_);\n            });\n            st.on('result', function (r) {\n                if (!r.ok && typeof r !== 'string') test._exitCode = 1\n            });\n        })(t);\n\n        results.push(t);\n        return t;\n    };\n    test._results = results;\n\n    test._tests = [];\n\n    test.createStream = function (opts) {\n        return results.createStream(opts);\n    };\n\n    test.onFinish = function (cb) {\n        results.on('done', cb);\n    };\n\n    test.onFailure = function (cb) {\n        results.on('fail', cb);\n    };\n\n    var only = false;\n    test.only = function () {\n        if (only) throw new Error('there can only be one only test');\n        only = true;\n        var t = test.apply(null, arguments);\n        results.only(t);\n        return t;\n    };\n    test._exitCode = 0;\n\n    test.close = function () { results.close() };\n\n    return test;\n}\n","map":null},"hash":"cabd6d9e6725410f257d4adbdaf5ad91","cacheData":{"env":{}},"id":3}